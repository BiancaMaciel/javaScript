Desafio da semana #2
Nesse exerc√≠cio, voc√™ est√° livre para escolher os nomes para suas vari√°veis e fun√ß√µes! üòÑ

// Crie uma fun√ß√£o que receba dois argumentos e retorne a soma dos mesmos.
R: function soma(a, b) { return a+b; }

// Declare uma vari√°vel que receba a invoca√ß√£o da fun√ß√£o criada acima, passando dois n√∫meros quaisquer por argumento, e somando `5` ao resultado retornado da fun√ß√£o.
R: result = soma(10,2) + 5;

// Qual o valor atualizado dessa vari√°vel?
R: 17;

// Declare uma nova vari√°vel, sem valor.
R: var newvar;

/*
Crie uma fun√ß√£o que adicione um valor √† vari√°vel criada acima, e retorne a string:
    O valor da vari√°vel agora √© VALOR.
Onde VALOR √© o novo valor da vari√°vel.
*/
R: function a() {
    newvar = 10;
    return 'O valor da variavel agora √© ' + newvar; }

// Invoque a fun√ß√£o criada acima.
R: result = a();

// Qual o retorno da fun√ß√£o? (Use coment√°rios de bloco).
R: /* O valor da variavel agora √© 10*/

/*
Crie uma fun√ß√£o com as seguintes caracter√≠sticas:
1. A fun√ß√£o deve receber 3 argumentos;
2. Se qualquer um dos tr√™s argumentos n√£o estiverem preenchidos, a fun√ß√£o deve retornar a string:
    Preencha todos os valores corretamente!
3. O retorno da fun√ß√£o deve ser a multiplica√ß√£o dos 3 argumentos, somando `2` ao resultado da multiplica√ß√£o.
*/
R: function newfunc(a,b,c){
    if(a===null || b===null || c===null) {
        return 'Preencha todos os valores corretamente!' ; 
    } 
    return (a*b*c) + 2;
   
} 

// Invoque a fun√ß√£o criada acima, passando s√≥ dois n√∫meros como argumento.
R: newfunction(1,5);

// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).
R: //  'Preencha todos os valores corretamente!'

// Agora invoque novamente a fun√ß√£o criada acima, mas passando todos os tr√™s argumentos necess√°rios.
R: newfunction(10,2,3);

// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).
R: //62

/*
Crie uma fun√ß√£o com as seguintes caracter√≠sticas:
1. A fun√ß√£o deve receber 3 argumentos.
2. Se somente um argumento for passado, retorne o valor do argumento.
3. Se dois argumentos forem passados, retorne a soma dos dois argumentos.
4. Se todos os argumentos forem passados, retorne a soma do primeiro com o segundo, e o resultado, dividido pelo terceiro.
5. Se nenhum argumento for passado, retorne o valor booleano `false`.
6. E ainda, se nenhuma das condi√ß√µes acima forem atendidas, retorne `null`.
*/
?

// Invoque a fun√ß√£o acima utilizando todas as possibilidades (com nenhum argumento, com um, com dois e com tr√™s.) Coloque um coment√°rio de linha ao lado da fun√ß√£o com o resultado de cada invoca√ß√£o.
?